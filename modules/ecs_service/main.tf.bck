variable "name" {}
variable "cluster_id" {}
variable "ecs_task_definition_arn" {}
variable "launch_type" {}

variable "deployment_maximum_percent" {}
variable "deployment_minimum_healthy_percent" {}

variable "awsvpc_subnets" {}
variable "awsvpc_security_group_ids" {}

variable "lb_create" {}
variable "lb_target_group_arn" {default = ""}

locals {
  awsvpc_enabled = "${length(var.awsvpc_subnets) > 0 ? 1 : 0 }"
}

resource "aws_ecs_service" "app-with-lb-awsvpc" {
  count = "${local.awsvpc_enabled * (var.lb_create == 1 ? 1 : 0)}"

  name            = "${var.name}"
  cluster         = "${var.cluster_id}"
  task_definition = "${var.ecs_task_definition_arn}"

  desired_count = "${var.desired_capacity}"
  launch_type   = "${var.launch_type}"

  deployment_maximum_percent         = "${var.deployment_maximum_percent}"
  deployment_minimum_healthy_percent = "${var.deployment_minimum_healthy_percent}"

  load_balancer {
    target_group_arn = "${aws_lb_target_group.service.id}"
    container_name   = "${lookup(var.container_properties[0], "name")}"
    container_port   = "${local.container_port}"
  }

  lifecycle {
    ignore_changes = ["desired_count", "task_definition", "revision"]
  }

  network_configuration {
    subnets         = ["${var.awsvpc_subnets}"]
    security_groups = ["${var.awsvpc_security_group_ids}"]
  }
}

resource "aws_ecs_service" "app-with-lb" {
  count           = "${(var.awsvpc_enabled == 0 ? 1 : 0 ) * (local.lb_attached == 1 ? 1 : 0)}"
  name            = "${local.cluster_name}-${var.name}"
  launch_type     = "${local.launch_type}"
  cluster         = "${local.cluster_id}"
  task_definition = "${aws_ecs_task_definition.app.arn}"

  desired_count = "${local.desired_capacity}"

  deployment_maximum_percent         = "${local.deployment_maximum_percent}"
  deployment_minimum_healthy_percent = "${local.deployment_minimum_healthy_percent}"

  load_balancer {
    target_group_arn = "${aws_lb_target_group.service.id}"
    container_name   = "${lookup(var.container_properties[0], "name")}"
    container_port   = "${local.container_port}"
  }

  lifecycle {
    ignore_changes = ["desired_count", "task_definition", "revision"]
  }
}

resource "aws_ecs_service" "app" {
  count = "${1 - local.lb_attached}"

  name            = "${local.cluster_name}-${var.name}"
  launch_type     = "${local.launch_type}"
  cluster         = "${local.cluster_id}"
  task_definition = "${aws_ecs_task_definition.app.arn}"
  desired_count   = "${local.desired_capacity}"

  lifecycle {
    ignore_changes = ["desired_count", "task_definition"]
  }
}
